{"version":3,"sources":["components/Menu.js","components/Answer.js","components/Question.js","components/Results.js","components/QuestionList.js","App.js","reportWebVitals.js","index.js"],"names":["categories","difficulties","Menu","handleStart","useState","Object","keys","category","setCategory","difficulty","setDifficulty","className","onChange","event","target","value","entries","map","name","id","diff","index","type","onClick","Answer","text","correct","handleSelectAnswer","showResult","clicked","setClicked","determineButtonClass","dangerouslySetInnerHTML","__html","disabled","Question","questionDetails","getNextQuestion","setShowResult","answeredCorrectly","setAnsweredCorrectly","isCorrect","number","question","shuffledAnswers","answer","correct_answer","key","Results","numberOfQuestions","numberCorrect","handlePlayAgain","QuestionList","questions","currentQuestion","setCurrentQuestion","setNumberCorrect","questionsComplete","setQuestionsComplete","answers","incorrect_answers","i","length","j","Math","floor","random","a","getShuffledAnswers","previousCorrect","nextQuestionIndex","App","inGame","setInGame","questionList","setQuestionList","categoryId","selectedDifficulty","axios","get","params","amount","toLowerCase","response","data","results","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cbc082c.chunk.js","sourcesContent":["import { useState } from 'react'\n\n// list of categories here: https://opentdb.com/api_category.php\nconst categories = {\n  \"General Knowledge\": 9,\n  \"Film\": 11,\n  \"Television\": 14,\n  \"Video Games\": 15,\n  \"Computers\": 18,\n  \"Geography\": 22,\n  \"Comics\": 29,\n  \"Anime and Manga\": 31,\n}\n\nconst difficulties = [\n  \"Easy\",\n  \"Medium\",\n  \"Hard\"\n]\n\nconst Menu = ({ handleStart }) => {\n  // initialise to category/difficulty to first value\n  const [category, setCategory] = useState(Object.keys(categories)[0])\n  const [difficulty, setDifficulty] = useState(difficulties[0])\n\n  return (\n    <div>\n      <h6>Choose category...</h6>\n      <select\n        className=\"custom-select\"\n        onChange={(event) => setCategory(event.target.value)}\n      >\n        {Object.entries(categories).map(([name, id]) => (\n          <option key={id}>{name}</option>\n        ))}\n      </select>\n\n      <h6 className=\"mt-3\">Choose difficulty...</h6>\n      <select\n        className=\"custom-select\"\n        onChange={(event) => setDifficulty(event.target.value)}\n      >\n        {difficulties.map((diff, index) => (\n          <option key={index}>{diff}</option>\n        ))}\n      </select>\n\n      <div className=\"bg-white rounded-pill mt-4\">\n        <button\n          type=\"button\"\n          className=\"btn btn-block btn-outline-primary rounded-pill\"\n          onClick={() => handleStart(categories[category], difficulty)}\n        >\n          Start quiz\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Menu\n","import { useState } from 'react'\n\nconst Answer = ({ text, correct, handleSelectAnswer, showResult }) => {\n  const [clicked, setClicked] = useState(false)\n\n  const handleClick = () => {\n    if (!showResult) {\n      handleSelectAnswer(correct)\n      setClicked(true)\n    }\n  }\n\n  const determineButtonClass = () => {\n    let basic = \"btn-outline-primary\"\n    if (showResult) {\n      if (correct) {\n        return 'btn-success'\n      } else {\n        if (clicked) {\n          return 'btn-danger'\n        }\n      }\n    }\n    return basic\n  }\n\n  return (\n    <div className=\"bg-white rounded-pill my-3\">\n      <button\n        type=\"button\"\n        className={`btn btn-block rounded-pill ${determineButtonClass()}`}\n        dangerouslySetInnerHTML={{ __html: `${text}` }}\n        onClick={handleClick}\n        disabled={showResult && !clicked}\n      >\n      </button>\n    </div>\n  )\n}\n\nexport default Answer\n","import { useState } from 'react'\nimport Answer from './Answer'\n\nconst Question = ({ questionDetails, getNextQuestion }) => {\n  const [showResult, setShowResult] = useState(false)\n  const [answeredCorrectly, setAnsweredCorrectly] = useState(false)\n\n  const handleSelectAnswer = (isCorrect) => {\n    if (isCorrect) {\n      setAnsweredCorrectly(true)\n    }\n    setShowResult(true)\n  }\n\n  const handleGetNextQuestion = () => {\n    getNextQuestion(answeredCorrectly)\n    setShowResult(false)\n    setAnsweredCorrectly(false)\n  }\n\n  return (\n    <div className={!showResult ? \"animate__animated animate__fadeIn animate__fast\" : \"\"}>\n      <h6>{`Question ${questionDetails.number + 1}:`}</h6>\n      <p\n        className=\"bg-primary rounded py-2 px-3\"\n        // dangerouslySetInnerHTML is used in case of html entities returned from the API\n        // e.g. 'Rubik&rsquo;s Cube'\n        dangerouslySetInnerHTML={{ __html: `${questionDetails.question}` }}\n      >\n      </p>\n      {questionDetails.shuffledAnswers.map(answer => (\n        <Answer\n          key={answer.key}\n          text={answer.text}\n          correct={answer.text === questionDetails.correct_answer}\n          handleSelectAnswer={handleSelectAnswer}\n          showResult={showResult}\n        />\n      ))}\n      {showResult && (\n        <button\n          type=\"button\"\n          className=\"btn btn-block btn-primary rounded-pill mb-2\"\n          onClick={handleGetNextQuestion}\n        >\n          Next question\n        </button>\n      )}\n      <p>Category: {questionDetails.category}, Difficulty: {questionDetails.difficulty}</p>\n    </div>\n  )\n}\n\nexport default Question\n","const Results = ({ numberOfQuestions, numberCorrect, handlePlayAgain }) => {\n  return (\n    <div className=\"text-center border rounded-lg my-4\">\n      <h4 className=\"my-3\">Thanks for playing!</h4>\n      <h4>Final score:</h4>\n      <h1>{numberCorrect}/{numberOfQuestions}</h1>\n      <div className=\"bg-white rounded-pill mx-5 my-4\">\n        <button\n          type=\"button\"\n          className=\"btn btn-block btn-outline-primary rounded-pill\"\n          onClick={handlePlayAgain}\n        >\n          Play again!\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Results\n","import { useState } from 'react'\nimport Question from './Question'\nimport Results from './Results'\n\n// Example question object\n// {\n//   \"category\": \"Geography\",\n//   \"type\": \"multiple\",\n//   \"difficulty\": \"medium\",\n//   \"question\": \"Which country inside the United Kingdom does NOT appear on its flag, the Union Jack?\",\n//   \"correct_answer\": \"Wales\",\n//   \"incorrect_answers\": [\n//     \"Scotland\",\n//     \"Ireland\",\n//     \"Isle of Wight\"\n//   ]\n// }\n\nconst QuestionList = ({ questions, handlePlayAgain }) => {\n  const [currentQuestion, setCurrentQuestion] = useState({ ...questions[0], number: 0 })\n  const [numberCorrect, setNumberCorrect] = useState(0)\n  const [questionsComplete, setQuestionsComplete] = useState(false)\n\n  const generateKey = () => {\n    return Math.floor(Math.random() * 1000000)\n  }\n\n  const getShuffledAnswers = () => {\n    let answers = [...currentQuestion.incorrect_answers, currentQuestion.correct_answer]\n    // shuffle answers\n    for (let i = answers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [answers[i], answers[j]] = [answers[j], answers[i]];\n    }\n    answers = answers.map(a => ({ text: a, key: generateKey() }))\n    return answers\n  }\n\n  const getNextQuestion = (previousCorrect) => {\n    if (previousCorrect) {\n      setNumberCorrect(numberCorrect + 1)\n    }\n    let nextQuestionIndex = currentQuestion.number + 1\n    if (questions.length === nextQuestionIndex) {\n      setQuestionsComplete(true)\n    } else {\n      setCurrentQuestion({ ...questions[nextQuestionIndex], number: nextQuestionIndex })\n    }\n  }\n\n  return (\n    <div>\n      { !questionsComplete && (\n        <Question\n          questionDetails={{ ...currentQuestion, shuffledAnswers: getShuffledAnswers() }}\n          getNextQuestion={getNextQuestion}\n        />\n      )}\n      { questionsComplete && (\n        <Results\n          numberOfQuestions={questions.length}\n          numberCorrect={numberCorrect}\n          handlePlayAgain={handlePlayAgain}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default QuestionList\n","import { useState } from 'react'\nimport axios from 'axios';\nimport \"./App.css\"\nimport Menu from \"./components/Menu\"\nimport QuestionList from './components/QuestionList';\n\nconst endpoint = \"https://opentdb.com/api.php\"\n\nfunction App() {\n  const [inGame, setInGame] = useState(false)\n  const [questionList, setQuestionList] = useState([])\n\n  const handleStart = async (categoryId, selectedDifficulty) => {\n    const response = await axios.get(endpoint, {\n      params: {\n        amount: 10,\n        category: categoryId,\n        difficulty: selectedDifficulty.toLowerCase()\n      }\n    })\n    setQuestionList(response.data.results)\n    setInGame(true)\n  }\n\n  const handlePlayAgain = () => {\n    setInGame(false)\n    setQuestionList([])\n  }\n\n  return (\n    <div className=\"container my-4\">\n      <h2 className=\"text-center\">React Quiz</h2>\n      {!inGame && <Menu handleStart={handleStart} />}\n      {inGame && <QuestionList questions={questionList} handlePlayAgain={handlePlayAgain} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}